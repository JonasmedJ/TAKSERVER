#!/bin/bash

# PKI Infrastructure Setup for Proxmox Server

set -euo pipefail # Exit on error, undefined var, or pipe failure

# Configuration Variables
CERT_VALIDITY_DAYS=365
WARN_BEFORE_EXPIRY=30
HOSTNAMES=("tak.opkbtn.dk" "pve.opkbtn.dk" "dns.opkbtn.dk" "fw.opkbtn.dk" "npm.opkbtn.dk")
ROOT_CA_DIR="/etc/ssl/rootca"
INTERMEDIATE_CA_DIR="${ROOT_CA_DIR}/intermediates/OPKBTN"

# Error handling function
error_exit() {
    echo "Error: ${1:-"Unknown Error"}" >&2
    exit 1
}

# Create directory structure
mkdir -p "${ROOT_CA_DIR}"/{root,intermediates/{OPKBTN,firewall}/{certs,crl,newcerts,private}} || \
    error_exit "Failed to create directory structure"
chmod -R 700 "${ROOT_CA_DIR}" || error_exit "Failed to set directory permissions"

# Initialize CA database files
touch "${ROOT_CA_DIR}/index.txt"
echo "01" > "${ROOT_CA_DIR}/serial"
echo "01" > "${ROOT_CA_DIR}/crlnumber"

touch "${INTERMEDIATE_CA_DIR}/index.txt"
echo "01" > "${INTERMEDIATE_CA_DIR}/serial"
echo "01" > "${INTERMEDIATE_CA_DIR}/crlnumber"

# Root CA Configuration
cat > "${ROOT_CA_DIR}/root-openssl.cnf" << 'EOL'
[ ca ]
default_ca = CA_default

[ CA_default ]
dir               = /etc/ssl/rootca
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand
private_key       = $dir/root-ca.key
certificate       = $dir/root-ca.crt
crlnumber         = $dir/crlnumber
crl               = $dir/root-ca.crl
crl_extensions    = crl_ext
default_md        = sha512
preserve          = no
policy            = policy_strict

[policy_strict]
countryName             = match
stateOrProvinceName     = optional
organizationName        = match
organizationalUnitName  = optional
commonName             = supplied
emailAddress           = optional

[crl_ext]
authorityKeyIdentifier=keyid:always

[req]
default_bits = 4096
default_md = sha512
default_keyfile = root-ca.key
distinguished_name = root_ca_dn
x509_extensions = root_ca_ext
prompt = no

[root_ca_dn]
countryName = DK
organizationName = OPKBTN
commonName = Root CA

[root_ca_ext]
basicConstraints = critical, CA:TRUE, pathlen:2
keyUsage = critical, digitalSignature, cRLSign, keyCertSign
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always
crlDistributionPoints = URI:file:///etc/ssl/rootca/root-ca.crl
EOL

# OPKBTN Intermediate CA Configuration
cat > "${INTERMEDIATE_CA_DIR}/OPKBTN-openssl.cnf" << 'EOL'
[ ca ]
default_ca = CA_default

[ CA_default ]
dir               = /etc/ssl/rootca/intermediates/OPKBTN
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand
private_key       = $dir/OPKBTN-ca.key
certificate       = $dir/OPKBTN-ca.crt
crlnumber         = $dir/crlnumber
crl               = $dir/OPKBTN-ca.crl
crl_extensions    = crl_ext
default_md        = sha512
preserve          = no
policy            = policy_strict

[policy_strict]
countryName             = match
stateOrProvinceName     = optional
organizationName        = match
organizationalUnitName  = optional
commonName             = supplied
emailAddress           = optional

[crl_ext]
authorityKeyIdentifier=keyid:always

[req]
default_bits = 4096
default_md = sha512
default_keyfile = OPKBTN-ca.key
distinguished_name = OPKBTN_ca_dn
x509_extensions = OPKBTN_ca_ext
prompt = no

[OPKBTN_ca_dn]
countryName = DK
organizationName = OPKBTN
commonName = OPKBTN Intermediate CA

[OPKBTN_ca_ext]
basicConstraints = critical, CA:TRUE, pathlen:1
keyUsage = critical, digitalSignature, cRLSign, keyCertSign
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always
crlDistributionPoints = URI:file:///etc/ssl/rootca/intermediates/OPKBTN/OPKBTN-ca.crl
EOL

# Certificate Expiration Warning Function
check_cert_expiration() {
    local cert_path=$1
    local days_to_warn=$2
    
    if [ ! -f "$cert_path" ]; then
        error_exit "Certificate not found: $cert_path"
    fi
    
    local expiry_date
    expiry_date=$(openssl x509 -enddate -noout -in "$cert_path" | cut -d= -f2) || \
        error_exit "Failed to get expiry date for $cert_path"
    
    local days_remaining
    days_remaining=$(date -d "$expiry_date" +%s | xargs -I {} bash -c "echo \$(( ({} - \$(date +%s)) / 86400 ))") || \
        error_exit "Failed to calculate days remaining for $cert_path"
    
    if [ "$days_remaining" -le "$days_to_warn" ]; then
        echo "WARNING: Certificate $cert_path expires in $days_remaining days!"
        return 0
    fi
    
    return 1
}

# Generate Certificate Revocation List (CRL) Function
generate_crl() {
    local ca_key=$1
    local ca_cert=$2
    local crl_path=$3
    local config_file=$4
    
    if [ ! -f "$ca_key" ] || [ ! -f "$ca_cert" ]; then
        error_exit "CA key or certificate not found for CRL generation"
    fi
    
    openssl ca -gencrl \
        -keyfile "$ca_key" \
        -cert "$ca_cert" \
        -out "$crl_path" \
        -config "$config_file" || \
        error_exit "Failed to generate CRL for $ca_cert"
        
    chmod 644 "$crl_path" || error_exit "Failed to set CRL permissions"
}

# Server Certificate Generation Function
generate_server_cert() {
    local hostname=$1
    local config_path="${INTERMEDIATE_CA_DIR}/${hostname}-openssl.cnf"
    local cert_dir="${INTERMEDIATE_CA_DIR}/certs"
    local key_dir="${INTERMEDIATE_CA_DIR}/private"
    
    # Create configuration for specific server
    cat > "$config_path" << EOL
[req]
default_bits = 4096
default_md = sha512
distinguished_name = server_dn
req_extensions = server_ext
prompt = no

[server_dn]
commonName = ${hostname}

[server_ext]
basicConstraints = critical, CA:FALSE
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = critical, serverAuth
subjectAltName = DNS:${hostname},DNS:*.${hostname}
EOL

    # Generate private key
    openssl genrsa -out "${key_dir}/${hostname}.key" 4096 || \
        error_exit "Failed to generate private key for ${hostname}"
    chmod 400 "${key_dir}/${hostname}.key" || \
        error_exit "Failed to set key permissions for ${hostname}"
    
    # Generate CSR
    openssl req -config "$config_path" \
        -key "${key_dir}/${hostname}.key" \
        -new -out "${cert_dir}/${hostname}.csr" || \
        error_exit "Failed to generate CSR for ${hostname}"
    
    # Generate Certificate
    openssl x509 -req -days "$CERT_VALIDITY_DAYS" -sha512 \
        -CA "${INTERMEDIATE_CA_DIR}/OPKBTN-ca.crt" \
        -CAkey "${INTERMEDIATE_CA_DIR}/OPKBTN-ca.key" \
        -CAcreateserial \
        -in "${cert_dir}/${hostname}.csr" \
        -out "${cert_dir}/${hostname}.crt" \
        -extfile "$config_path" \
        -extensions server_ext || \
        error_exit "Failed to generate certificate for ${hostname}"
    
    chmod 644 "${cert_dir}/${hostname}.crt" || \
        error_exit "Failed to set certificate permissions for ${hostname}"
    
    # Special handling for specific hostnames
    if [ "$hostname" == "tak.opkbtn.dk" ]; then
        # Generate PEM (concatenated key and cert)
        cat "${key_dir}/${hostname}.key" "${cert_dir}/${hostname}.crt" > \
            "${cert_dir}/${hostname}.pem" || \
            error_exit "Failed to generate PEM for ${hostname}"
        chmod 400 "${cert_dir}/${hostname}.pem"
        
        # Generate PKCS12
        openssl pkcs12 -export \
            -out "${cert_dir}/${hostname}.p12" \
            -inkey "${key_dir}/${hostname}.key" \
            -in "${cert_dir}/${hostname}.crt" \
            -passout pass:changeit || \
            error_exit "Failed to generate PKCS12 for ${hostname}"
        chmod 400 "${cert_dir}/${hostname}.p12"
        
        # Generate Java Keystore (JKS)
        keytool -importcert -noprompt \
            -alias "${hostname}" \
            -file "${cert_dir}/${hostname}.crt" \
            -keystore "${cert_dir}/${hostname}.jks" \
            -storepass changeit || \
            error_exit "Failed to generate JKS for ${hostname}"
        chmod 400 "${cert_dir}/${hostname}.jks"
    fi
}

# Generate Root CA
if [ ! -f "${ROOT_CA_DIR}/root-ca.key" ]; then
    openssl genrsa -out "${ROOT_CA_DIR}/root-ca.key" 4096 || \
        error_exit "Failed to generate Root CA key"
    chmod 400 "${ROOT_CA_DIR}/root-ca.key"
    
    openssl req -config "${ROOT_CA_DIR}/root-openssl.cnf" \
        -key "${ROOT_CA_DIR}/root-ca.key" \
        -new -x509 -days $((CERT_VALIDITY_DAYS * 2)) \
        -out "${ROOT_CA_DIR}/root-ca.crt" || \
        error_exit "Failed to generate Root CA certificate"
    chmod 644 "${ROOT_CA_DIR}/root-ca.crt"
fi

# Generate Intermediate CA
if [ ! -f "${INTERMEDIATE_CA_DIR}/OPKBTN-ca.key" ]; then
    openssl genrsa -out "${INTERMEDIATE_CA_DIR}/OPKBTN-ca.key" 4096 || \
        error_exit "Failed to generate Intermediate CA key"
    chmod 400 "${INTERMEDIATE_CA_DIR}/OPKBTN-ca.key"
    
    openssl req -config "${INTERMEDIATE_CA_DIR}/OPKBTN-openssl.cnf" \
        -key "${INTERMEDIATE_CA_DIR}/OPKBTN-ca.key" \
        -new -out "${INTERMEDIATE_CA_DIR}/OPKBTN-ca.csr" || \
        error_exit "Failed to generate Intermediate CA CSR"
    
    openssl x509 -req -days $CERT_VALIDITY_DAYS -sha512 \
        -CA "${ROOT_CA_DIR}/root-ca.crt" \
        -CAkey "${ROOT_CA_DIR}/root-ca.key" \
        -CAcreateserial \
        -in "${INTERMEDIATE_CA_DIR}/OPKBTN-ca.csr" \
        -out "${INTERMEDIATE_CA_DIR}/OPKBTN-ca.crt" \
        -extensions OPKBTN_ca_ext \
        -extfile "${INTERMEDIATE_CA_DIR}/OPKBTN-openssl.cnf" || \
        error_exit "Failed to generate Intermediate CA certificate"
    chmod 644 "${INTERMEDIATE_CA_DIR}/OPKBTN-ca.crt"
fi

# Generate Root CA CRL
generate_crl \
    "${ROOT_CA_DIR}/root-ca.key" \
    "${ROOT_CA_DIR}/root-ca.crt" \
    "${ROOT_CA_DIR}/root-ca.crl" \
    "${ROOT_CA_DIR}/root-openssl.cnf"

# Generate Intermediate CA CRL
generate_crl \
    "${INTERMEDIATE_CA_DIR}/OPKBTN-ca.key" \
    "${INTERMEDIATE_CA_DIR}/OPKBTN-ca.crt" \
    "${INTERMEDIATE_CA_DIR}/OPKBTN-ca.crl" \
    "${INTERMEDIATE_CA_DIR}/OPKBTN-openssl.cnf"

# Generate server certificates
for hostname in "${HOSTNAMES[@]}"; do
    echo "Generating certificate for $hostname..."
    generate_server_cert "$hostname"
done

# Check certificate expirations
echo "Checking Certificate Expirations:"
for hostname in "${HOSTNAMES[@]}"; do
    check_cert_expiration "${INTERMEDIATE_CA_DIR}/certs/${hostname}.crt" "$WARN_BEFORE_EXPIRY"
done

echo "PKI Infrastructure Setup Complete"
